#include <stdio.h>
#include <unistd.h>
#include <sys/socket.h>
#include <linux/if_packet.h>
#include <linux/wireless.h>
#include <fcntl.h>
#include <net/if_arp.h>
#include <arpa/inet.h>
#include <linux/if.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <string.h>
#include <cstdlib>

using namespace std;

#define ETH_P_ALL 0x0003
#define ETH_P_80211_RAW 0x0025

// u_char a[] = { 0x00, 0x00, 0x12, 0x00, 0x2e, 0x48, 0x00, 0x00, 0x00, 0x0c, 0xa8, 0x09, 0xc0, 0x00, 0xdb, 0x01,
//     0x00, 0x00, 0xc4, 0x00, 0x90, 0x01, 0xd0, 0x16, 0xb4, 0xea, 0x24, 0x55};
u_char a[] = { 0x00, 0x00, 0x19, 0x00, 0x6f, 0x08, 0x00, 0x00, 0x91, 0xcd, 0x67, 0x0b, 0x00, 0x00, 0x00, 0x00,
    0x12, 0x24, 0xad, 0x16, 0x40, 0x01, 0xab, 0xa6, 0x01, 0x08, 0x18, 0x00, 0x00, 'T', 'Y', '*',
    '2', 0x00, 0x00,0x12,0x12, 0x11, 0x22, 0x33, 0x44, 0x56, 0x46, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66,
    0x77, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66,
    0x77, 0x14, 0x00, 0x00, 0x00, 0x4b, 0x55, 0x01, 0x05, 0xa4, 0xb0, 0x48, 0x60, 0x6c, 0x03, 0x01,
    0x9d, 0x05, 0x04, 0x00, 0x01, 0x00, 0x00, 0x2d, 0x1a, 0xad, 0x09, 0x1b, 0xff, 0x00, 0x00, 0x00, 0x00
};
u_char buf[1000];

int main()
{
    int sd = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL));
    if (-1 == sd)
    {
        perror("open socket error!\n");
        return 1;
    }
    int ret;
    struct ifreq req;
    memset(&req, 0, sizeof(req));
    strncpy(req.ifr_name,"mon0", 4);
    ret=ioctl(sd,SIOCGIFINDEX,&req);
    if (0 > ret)
    {
        perror("ioctl failed\n");
        return 1;
    }
    struct sockaddr_ll sll;
    memset(&sll, 0, sizeof(sll));
	sll.sll_family = AF_PACKET;
	sll.sll_ifindex = req.ifr_ifindex;
    sll.sll_protocol = htons(ETH_P_80211_RAW);
    if (bind(sd, (struct sockaddr *) &sll, sizeof(sll)) < 0)
	{
		perror("bind(ETH_P_ALL) failed");
		return (1);
	}
    for (int i=0;i<100000;++i)
    {
        usleep(500000);
        ret = send(sd, a, sizeof(a), 0);
        printf("send %d bytes\n", ret);
    }
}